<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于git的使用]]></title>
    <url>%2F2017%2F07%2F26%2F%E5%85%B3%E4%BA%8Egit%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[文章摘要：git常用命令的使用 什么是Git？Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。 Git 与 SVN 区别？GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。Git 与 SVN 区别点：(1) GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。(2) GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。(3) GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。(4) GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。(5) GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。 Git安装配置Git 各平台安装包下载地址为：http://git-scm.com/downloadsMac系统下载后安装即可。或者 1$ brew install git Git工作流程一般工作流程如下：(1) 克隆 Git 资源作为工作目录。(2) 在克隆的资源上添加或修改文件。(3) 如果其他人修改了，你可以更新资源。(4) 在提交前查看修改。(5) 提交修改。(6) 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。 同步到远程仓库 12345678$ mkdir ceshi # 创建ceshi文件夹$ cd ceshi # 转到ceshi目录$ git init # 初始化git$ echo &quot;# ceshi&quot; &gt;&gt; README.md # 写入# ceshi到 README.md$ git add README.md # 添加$ git commit -m &quot;first commit&quot; # 提交$ git remote add origin https://git.coding.net/SwiftMan/ceshi.git # 添加远程仓库地址$ git push -u origin master # 同步到远程仓库 git的详细使用 Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。 12$ git config --global user.name &apos;runoob&apos; $ git config --global user.email test@runoob.com 创建仓库Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。在执行完成 git init 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN 会在每个子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录）。 12$ git init # 该命令执行完后会在当前目录生成一个 .git 目录$ git init newrepo # 使用我们指定目录作为Git仓库 以下命令将目录下以 .c 结尾及 README 文件提交到仓库中。 123$ git add *.c$ git add README$ git commit -m &quot;初始化项目版本&quot; 我们使用 git clone 从现有 Git 仓库中拷贝项目（类似 svn checkout） 1234567891011$ git clone &lt;repo&gt;$ git clone &lt;repo&gt; &lt;directory&gt;参数说明：repo:Git 仓库。directory:本地目录。例如要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：$ git clone git://github.com/schacon/grit.git执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：$ git clone git://github.com/schacon/grit.git mygrit$ git status -s # 命令用于查看项目的当前状态, -s 参数，以获得简短的结果输出 git diff 1234$ git diff # 尚未缓存的改动$ git diff --cached # 查看已缓存的改动$ git diff HEAD # 查看已缓存的与未缓存的所有改动$ git diff --stat # 显示摘要而非整个 diff git commit 123$ git commit -m ‘ddd‘ # 将缓存区内容添加到仓库中如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步$ git commit -am &apos;修改 hello.php 文件&apos; $ git reset HEAD – hello.php # 取消hello.php的缓存 git rmgit rm 会将条目从缓存区中移除。这与 git reset HEAD 将条目取消缓存是有区别的。 “取消缓存”的意思就是将缓存区恢复为我们做出修改之前的样子。默认情况下，git rm -f file 会将文件从缓存区和你的硬盘中（工作目录）删除。如果你要在工作目录中留着该文件，可以使用 git rm –cached： git mvgit mv 命令做得所有事情就是 git rm –cached 命令的操作， 重命名磁盘上的文件，然后再执行 git add 把新文件添加到缓存区。 git remote 12$ git remote # 要查看当前配置有哪些远程仓库$ git remote -v # 执行时加上 -v 参数，你还可以看到每个别名的实际链接地址 提取远程仓库Git 有两个命令用来提取远程仓库的更新。1、从远程仓库下载新分支与数据：git fetch该命令执行完后需要执行git merge 远程分支到你所在的分支。2、从远端仓库提取数据并尝试合并到当前分支：git pull该命令就是在执行 git fetch 之后紧接着执行 git merge 远程分支到你所在的任意分支。假设你配置好了一个远程仓库，并且你想要提取更新的数据，你可以首先执行 git fetch [alias] 告诉 Git 去获取它有你没有的数据，然后你可以执行 git merge [alias]/[branch] 以将服务器上的任何更新（假设有人这时候推送到服务器了）合并到你的当前分支。推送你的新分支与数据到某个远端仓库命令$ git push [alias] [branch]以上命令将你的 [branch] 分支推送成为 [alias] 远程仓库上的 [branch] 分支，实例如下。 删除远程仓库删除远程仓库你可以使用命令：git remote rm [别名] 建立分支要先commit一次才会真正建立master分支创建分支命令：$ git branch (branchname)切换分支命令:$ git checkout (branchname)当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。合并分支命令:$ git merge没有参数时，git branch 会列出你在本地的分支$ git branch我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。 删除分支$ git branch -d/-D(没有第一次合并过分支的时候用-D) (branchname) 查看提交历史 1234567891011$ git log # 查看提交历史$ git log --oneline # 查看历史记录的简洁版本$ git log --oneline --graph # 查看历史中什么时候出现了分支、合并$ git log --reverse --oneline # &apos;--reverse&apos;参数来逆向显示所有日志如果只想查找指定用户的提交日志可以使用命令：git log --author , 例如，比方说我们要找 Git 源码中 Linus 提交的部分：$ git log --author=Linus --oneline -5如果你要指定日期，可以执行几个选项：--since 和 --before，但是你也可以用 --until 和 --after。 例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 --no-merges 选项以隐藏合并提交）：$ git log --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges Git 标签 1234567891011121314151617181920$ git tag -a v1.0 # 创建带注解的标签$ git log --oneline --decorate --graph # 注意当我们执行 git log --decorate 时，我们可以看到我们的标签了$ git tag # 查看所有标签如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。例如，假设我们发布了提交 85fc7e7(上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：git tag -a v0.9 85fc7e7指定标签信息命令：$ git tag -a &lt;tagname&gt; -m &quot;w3cschool.cc标签&quot;PGP签名标签命令：$ git tag -s &lt;tagname&gt; -m &quot;w3cschool.cc标签&quot;$ git tag -d v1.0 # 删除标签查看此版本所修改的内容$ git show v1.0 相关链接：Git 教程 转载请注明出处文章有问题请指出]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS开发零碎知识点整理]]></title>
    <url>%2F2017%2F07%2F25%2FiOS%E5%BC%80%E5%8F%91%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[文章摘要：整理iOS零碎知识点 调用代码使应用进入后台 1[[UIApplication sharedApplication] performSelector:@selector(suspend)]; 带中文的URL处理 12345// http://static.tripbe.com/videofiles/视频/我的自拍视频.mp4NSString *path =(__bridge_transfer NSString *)CFURLCreateStringByReplacingPercentEscapesUsingEncoding(NULL, (__bridge CFStringRef)model.mp4_url, CFSTR(""), CFStringConvertNSStringEncodingToEncoding(NSUTF8StringEncoding)); 获取WebView高度 12345- (void)webViewDidFinishLoad:(UIWebView *)webView &#123; CGFloat height = [[webView stringByEvaluatingJavaScriptFromString:@"document.body.offsetHeight"] floatValue]; CGRect frame = webView.frame; webView.frame = CGRectMake(frame.origin.x, frame.origin.y, frame.size.width, height); &#125; View设置图片 第一种方法123UIColor *bgColor = [UIColor colorWithPatternImage: [UIImage imageNamed:@"bgImg.png"];UIView *myView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 320, 480)];[myView setBackGroundColor:bgColor]; 第二种方法1234UIImage *image = [UIImage imageNamed:@"yourPicName@2x.png"];yourView.layer.contents = (__bridge id)image.CGImage;// 设置显示的图片范围yourView.layer.contentsCenter = CGRectMake(0.25,0.25,0.5,0.5);//四个值在0-1之间，对应的为x，y，width，height。 去掉TableView 底部分割线 1yourTableView.tableFooterView = [UIView new]; 更改cell分割线位置 12345678910111213141516171819- (void)viewDidLayoutSubviews &#123; if ([self.mytableview respondsToSelector:@selector(setSeparatorInset:)]) &#123; [self.mytableview setSeparatorInset:UIEdgeInsetsMake(0, 0, 0, 0)]; &#125; if ([self.mytableview respondsToSelector:@selector(setLayoutMargins:)]) &#123; [self.mytableview setLayoutMargins:UIEdgeInsetsMake(0, 0, 0, 0)]; &#125;&#125;# pragma mark - cell分割线- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath&#123; if ([cell respondsToSelector:@selector(setSeparatorInset:)])&#123; [cell setSeparatorInset:UIEdgeInsetsMake(0, 0, 0, 0)]; &#125; if ([cell respondsToSelector:@selector(setLayoutMargins:)]) &#123; [cell setLayoutMargins:UIEdgeInsetsMake(0, 0, 0, 0)]; &#125;&#125; UILabel和UIImageView的交互userInteractionEabled默认为NO。那么如果你把这两个类做为父试图的话，里面的所有东东都不可以点击哦。 搜索条Cancel改标题 123456789- (BOOL)searchBarShouldBeginEditing:(UISearchBar *)searchBar&#123; searchController.searchBar.showsCancelButton = YES; UIButton *canceLBtn = [searchController.searchBar valueForKey:@"cancelButton"]; [canceLBtn setTitle:@"取消" forState:UIControlStateNormal]; [canceLBtn setTitleColor:[UIColor colorWithRed:14.0/255.0 green:180.0/255.0 blue:0.0/255.0 alpha:1.00] forState:UIControlStateNormal]; searchBar.showsCancelButton = YES; return YES;&#125; TableView回收键盘 12yourTableView.keyboardDismissMode = UIScrollViewKeyboardDismissModeOnDrag;// 另外一个枚举为UIScrollViewKeyboardDismissModeInteractive，表示在键盘内部滑动，键盘逐渐下去。 NSTimerNSTimer计算的时间并不精确NSTimer需要添加到runLoop运行才会执行，但是这个runLoop的线程必须是已经开启。NSTimer会对它的tagert进行retain，我们必须对其重复性的使用intvailte停止。target如果是self（指UIViewController），那么VC的retainCount+1，如果你不释放NSTimer，那么你的VC就不会dealloc了，内存泄漏了。 十六进制取颜 1234567891011121314151617181920212223242526272829303132333435363738394041+ (UIColor *)colorWithHexString:(NSString *)color&#123; NSString *cString = [[color stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] uppercaseString]; // String should be 6 or 8 characters if ([cString length] &lt; 6) &#123; return [UIColor clearColor]; &#125; // strip 0X if it appears if ([cString hasPrefix:@"0X"]) cString = [cString substringFromIndex:2]; if ([cString hasPrefix:@"#"]) cString = [cString substringFromIndex:1]; if ([cString length] != 6) return [UIColor clearColor]; // Separate into r, g, b substrings NSRange range; range.location = 0; range.length = 2; //r NSString *rString = [cString substringWithRange:range]; //g range.location = 2; NSString *gString = [cString substringWithRange:range]; //b range.location = 4; NSString *bString = [cString substringWithRange:range]; // Scan values unsigned int r, g, b; [[NSScanner scannerWithString:rString] scanHexInt:&amp;r]; [[NSScanner scannerWithString:gString] scanHexInt:&amp;g]; [[NSScanner scannerWithString:bString] scanHexInt:&amp;b]; return [UIColor colorWithRed:((float) r / 255.0f) green:((float) g / 255.0f) blue:((float) b / 255.0f) alpha:1.0f];&#125; 取今天是星期几 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758+ (NSString *) getweekDayStringWithDate:(NSDate *) date&#123; NSCalendar * calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar]; // 指定日历的算法 NSDateComponents *comps = [calendar components:NSWeekdayCalendarUnit fromDate:date]; // 1 是周日，2是周一 3.以此类推 NSNumber * weekNumber = @([comps weekday]); NSInteger weekInt = [weekNumber integerValue]; NSString *weekDayString = @"(周一)"; switch (weekInt) &#123; case 1: &#123; weekDayString = @"(周日)"; &#125; break; case 2: &#123; weekDayString = @"(周一)"; &#125; break; case 3: &#123; weekDayString = @"(周二)"; &#125; break; case 4: &#123; weekDayString = @"(周三)"; &#125; break; case 5: &#123; weekDayString = @"(周四)"; &#125; break; case 6: &#123; weekDayString = @"(周五)"; &#125; break; case 7: &#123; weekDayString = @"(周六)"; &#125; break; default: break; &#125; return weekDayString;&#125; UIView的部分圆角问题 12345678910111213141516UIView *view2 = [[UIView alloc] initWithFrame:CGRectMake(120, 10, 80, 80)];view2.backgroundColor = [UIColor redColor];[self.view addSubview:view2]; UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:view2.bounds byRoundingCorners:UIRectCornerBottomLeft | UIRectCornerBottomRight cornerRadii:CGSizeMake(10, 10)];CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];maskLayer.frame = view2.bounds;maskLayer.path = maskPath.CGPath;view2.layer.mask = maskLayer;//其中，byRoundingCorners:UIRectCornerBottomLeft |UIRectCornerBottomRight//指定了需要成为圆角的角。该参数是UIRectCorner类型的，可选的值有：//* UIRectCornerTopLeft//* UIRectCornerTopRight//* UIRectCornerBottomLeft//* UIRectCornerBottomRight//* UIRectCornerAllCorners 滑动时隐藏navigationBar 1self.navigationController.hidesBarsOnSwipe = YES; iOS画虚线 123456789101112#import &lt;QuartzCore/QuartzCore.h&gt; CGContextRef context =UIGraphicsGetCurrentContext(); CGContextBeginPath(context); CGContextSetLineWidth(context, 2.0); CGContextSetStrokeColorWithColor(context, [UIColor whiteColor].CGColor); CGFloat lengths[] = &#123;10,10&#125;; CGContextSetLineDash(context, 0, lengths,2); CGContextMoveToPoint(context, 10.0, 20.0); CGContextAddLineToPoint(context, 310.0,20.0); CGContextStrokePath(context); CGContextClosePath(context); 自动布局多行UILabel问题 12// 需要设置其preferredMaxLayoutWidth属性才能正常显示多行内容。另外如果出现显示不全文本，可以在计算的结果基础上＋0.5。CGFloat h = [model.message boundingRectWithSize:CGSizeMake([UIScreen mainScreen].bounds.size.width - kGAP-kAvatar_Size - 2*kGAP, CGFLOAT_MAX) options:NSStringDrawingUsesLineFragmentOrigin attributes:attributes context:nil].size.height+0.5; 禁止运行时自动锁屏 1[[UIApplication sharedApplication] setIdleTimerDisabled:YES]; 强制App直接退出 123456789- (void)exitApplication &#123; AppDelegate *app = [UIApplication sharedApplication].delegate; UIWindow *window = app.window; [UIView animateWithDuration:1.0f animations:^&#123; window.alpha = 0; &#125; completion:^(BOOL finished) &#123; exit(0); &#125;];&#125; Label行间距 12345678910NSMutableAttributedString *attributedString = [[NSMutableAttributedString alloc] initWithString:self.contentLabel.text]; NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init]; [paragraphStyle setLineSpacing:3]; // 调整行间距 [attributedString addAttribute:NSParagraphStyleAttributeName value:paragraphStyle range:NSMakeRange(0, [self.contentLabel.text length])];self.contentLabel.attributedText = attributedString; MRC和ARC混编设置方式在XCode中targets的build phases选项下Compile Sources下选择-&gt;不需要arc编译的文件，双击输入 -fno-objc-arc 即可MRC工程中也可以使用ARC的类，方法如下：在XCode中targets的build phases选项下Compile Sources下选择要使用arc编译的文件，双击输入 -fobjc-arc 即可 cell对勾颜色修改 1yourTableView.tintColor = [UIColor redColor]; 同时按两个按钮问题 1[button setExclusiveTouch:YES]; 修改占位符颜色和大小 123textField.placeholder = @"请输入用户名"; [textField setValue:[UIColor redColor] forKeyPath:@"_placeholderLabel.textColor"]; [textField setValue:[UIFont boldSystemFontOfSize:16] forKeyPath:@"_placeholderLabel.font"]; 禁止复制粘贴 1234567- (BOOL)canPerformAction:(SEL)action withSender:(id)sender&#123; if ([UIMenuController sharedMenuController]) &#123; [UIMenuController sharedMenuController].menuVisible = NO; &#125; return NO;&#125; 进入App在AppStore页面 1234567// 先用iTunes Link Maker找到软件在访问地址，格式为itms-apps://ax.itunes.apple.com/…，然后复制链接！#define ITUNESLINK @"itms-apps://ax.itunes.apple.com/..."NSURL *url = [NSURL URLWithString:ITUNESLINK];if([[UIApplication sharedApplication] canOpenURL:url])&#123; [[UIApplication sharedApplication] openURL:url];&#125;// 如果把上述地址中itms-apps改为http就可以在浏览器中打开了。可以把这个地址放在自己的网站里，链接到app store。 iTunes Link Maker地址：http://itunes.apple.com/linkmaker 隐藏系统tabbar 123456789101112131415// 1、单个处理YourViewController *yourVC = [YourViewController new];yourVC.hidesBottomBarWhenPushed = YES;[self.navigationController pushViewController:yourVC animated:YES];// 2.统一在基类里面处理,新建一个类BaseNavigationController继承UINavigationController，然后重写 -(void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated这个方法。所有的push事件都走此方法。@interface BaseNavigationController : UINavigationController @end-(void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated&#123; [super pushViewController:viewController animated:animated]; if (self.viewControllers.count&gt;1) &#123; viewController.hidesBottomBarWhenPushed = YES; &#125;&#125; 取消系统的返回手势 1self.navigationController.interactivePopGestureRecognizer.enabled = NO; 改WebView字体/颜色 12345678// UIWebView设置字体大小，颜色，字体： UIWebView无法通过自身的属性设置字体的一些属性，只能通过html代码进行设置 在webView加载完毕后：- (void)webViewDidFinishLoad:(UIWebView *)webView &#123; NSString *str = @"document.getElementsByTagName('body')[0].style.webkitTextSizeAdjust= '60%'"; [webView stringByEvaluatingJavaScriptFromString:str]; &#125;NSString *jsString = [[NSString alloc] initWithFormat:@"document.body.style.fontSize=%f;document.body.style.color=%@",fontSize,fontColor]; [webView stringByEvaluatingJavaScriptFromString:jsString]; 获取系统版本号 123456// 第一种NSString * filePath = [[NSBundle mainBundle] pathForResource:@"Info" ofType:@"plist"]; NSDictionary * dic = [NSDictionary dictionaryWithContentsOfFile:filePath]; NSString * version = dic[@"CFBundleShortVersionString"];// 第二种NSString * ver = [NSBundle mainBundle].infoDictionary[@"CFBundleShortVersionString"]; CocoaPods无法显示类名 设置pch文件1、pch原理：pch里面的内容被项目中的所有文件共有2、存放一些公用的宏、头文件3、pch需要提前编译$(SRCROOT)/Base/BasePrefixHeader.pch 在oc项目中使用Swift上面的修改了一个配置项，有一个Product Module Name在后面会使用。在工程里面点击File/New/File…,选择iOS/Source/Cocoa Touch Class,按照如下填写创建一个新的文件：上图中的Subclass of一定要设置为NSObject或其子类，否则OC工程将不会找到该类。点击确认后会选择保存路径，点击Create，出现如下界面：这个界面是询问是否创建桥接的头文件，这个文件在Swift调用OC代码的时候比较管用，但是在OC中调用Swift的时候我发现没有什么卵用。选择Don’t Create按钮。在Test.swift中添加如下的代码(解释都在注释里面了)：我们在我们想要调用Swift类的方法里面引入头文件：”Product Module Name-Swift.h”,其中Product Module Name替换成在上面配置项中显示的内容，例如：// 引入Swift头文件 #import “OCAndSwift-Swift.h” 解决横屏状态栏默认隐藏的问题 12345678910111213141516// 在Info.plist文件添加View controller-based status bar appearance 设置为YES；// 设置状态栏样式- (UIStatusBarStyle)preferredStatusBarStyle &#123; // 白色 return UIStatusBarStyleLightContent;&#125;// 在需要显示状态的控制器（横屏时）敲入以下代码：// 设置是否隐藏- (BOOL)prefersStatusBarHidden &#123; // [super prefersStatusBarHidden]; return NO;&#125;//设置隐藏动画- (UIStatusBarAnimation)preferredStatusBarUpdateAnimation &#123; return UIStatusBarAnimationNone;&#125; iOS横竖屏适配 123456789101112131415161718-(void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id&lt;UIViewControllerTransitionCoordinator&gt;)coordinator&#123; [super viewWillTransitionToSize:size withTransitionCoordinator:coordinator]; [coordinator animateAlongsideTransition:^(id&lt;UIViewControllerTransitionCoordinatorContext&gt; context) &#123; //计算旋转之后的宽度并赋值 CGSize screen = [UIScreen mainScreen].bounds.size; //界面处理逻辑 self.lineChartView.frame = CGRectMake(0, 30, screen.width, 200.0); //动画播放完成之后 if(screen.width &gt; screen.height)&#123; NSLog(@"横屏"); &#125;else&#123; NSLog(@"竖屏"); &#125; &#125; completion:^(id&lt;UIViewControllerTransitionCoordinatorContext&gt; context) &#123; NSLog(@"动画播放完之后处理"); &#125;];&#125; 转载请注明出处文章有问题请指出]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS常用框架精选]]></title>
    <url>%2F2017%2F07%2F21%2FiOS%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E7%B2%BE%E9%80%89%2F</url>
    <content type="text"><![CDATA[文章摘要：精选iOS常用框架 动画 lottie —— 利用json做动画 Animations —— 动画库，很炫 A-GUIDE-TO-iOS-ANIMATION —— 动画指南 pop —— facebook动画框架 IOSAnimationDemo —— iOS 动画demo VCTransitionLibrary —— 控制器转场动画库 UI整体结构布局 MMDrawerController —— 功能最多的抽屉框架 RESideMenu —— 最好用的抽屉框架 RDVTabBarController —— 自定义tabbarController PKRevealController —— 非常简单的设置，高度的自定义，手势的识别非常好 iOS控件 JDStatusBarNotification —— 电池栏通知 JDFlipNumberView —— 数字或图片翻转 SDCycleScrollView —— iOS图片、文字轮播器 StitchingImage —— iOS 仿微信群组封面拼接控件 iCarousel —— 卡片切换 KYGooeyMenu —— 带粘性的扇形菜单 KYAnimatedPageControl —— 粘性小球 旋转方块 KYCuteView —— 实现类似QQ消息拖拽消失的交互+GameCenter的浮动小球效果 VBFPopFlatButton —— 基于pop框架实现的按钮 CTTextDisplayView —— CTTextDisplayView 是一个CoreText完成的图文混排视图，主要用于文本中显示表情@#URL等，类似于QQ、微博的评论图文功能。 GSKStretchyHeaderView —— 有弹性的tableViewHeader SCLAlertView —— 弹出提示框 SXWaveAnimate —— 水波纹 QBPopupMenu —— 长按弹出菜单 PYSearch —— 搜索控制器 MBProgressHUD —— 最常用的HUD FFToast —— 最全的HUD ZCAnimatedLabel —— UILabel动画 TextFieldEffects —— 文本输入效果 SlackTextViewController FontAwesomeKit —— Font Awesome 是非常优秀的，使用这个库可以简单地添加字体到你的项目当中，另外还有很多其它方面的功能。 MGSwipeTableCell —— 可擦除式表格单元 图表 awesome-ios-chart —— 图表 布局 SDAutoLayout —— 一行代码搞定自动布局 Masonry —— 链式布局框架，很好用 yoga —— facebook开源的布局框架（跨平台） 网络 AFNetworking ——— 很强大 XMNetworking —— 基于AFNetworking二次封装 数据库 fmdb —— 简化数据操作 MagicalRecord —— MagicalRecord 就像是针对 Core Data 的一个封装，隐藏了所有跟开发者无关的东西。 刷新 MJRefresh —— app刷新 模型转换 MJExtension —— 简单好用 YYModel —— 高性能的 iOS JSON 模型框架 图片下载 SDWebImage —— 好用 YYWebImage —— 高性能的 iOS 异步图像加载框架 颜色 Wonderful —— 一个关于色彩的库 Chameleon —— 支持Swift的颜色库 其它 IQKeyboardManager —— 弹出键盘管理 ReactiveCocoa —— 响应式编程框架 SAMKeychain —— 存储用户名和密码 DZNEmptyDataSet —— 这是 iOS 内建的标准，用于处理空表和集合视图 PDTSimpleCalendar —— 日历组件 GPUImage —— GPUImage为我们提供了由GPU加速的相机预览效果（包括图像和视频），速度极快。 iRate —— 一个便于使用的类库，可用于督促在iPhone、Mac应用商店下载并使用你的app用户给你推荐 Swift Alamofire —— Alamofire 是一个写在 Swift 上的十分美观的网络文库。 相关链接：IOS第三方框架集合OpenSource27 款 iOS 开源库，让你的开发溜到飞起 转载请注明出处文章有问题请指出]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yarn一些常用命令的使用]]></title>
    <url>%2F2017%2F07%2F21%2FUseYarn%2F</url>
    <content type="text"><![CDATA[文章摘要：介绍yarn的一些常用命令的使用 初始化项目1$ yarn init 添加依赖包123$ yarn add [package]$ yarn add [package]@[version]$ yarn add [package]@[tag] 123$ yarn add [package] --dev$ yarn add [package] --peer $ yarn add [package] --optional 升级依赖包123$ yarn upgrade [package]$ yarn upgrade [package]@[version]$ yarn upgrade [package]@[tag] 移除依赖包1$ yarn remove [package] 安装项目的全部依赖123$ yarn install 或$ yarn 相关链接：yarn官网 转载请注明出处文章有问题请指出]]></content>
      <categories>
        <category>终端命令</category>
      </categories>
      <tags>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[npm的一些常用命令]]></title>
    <url>%2F2017%2F07%2F19%2FUseNpm%2F</url>
    <content type="text"><![CDATA[文章摘要：介绍npm一些常用命令的使用 安装模块全局安装1$ npm install &lt;Module Name&gt; -g 局部安装1$ npm install &lt;Module Name&gt; 你需要在当前的目录下执行初始化，也就是说当前目录必须有 package.json 文件。或者，你在当前的目录下人为的建立好node_modules目录否则npm会一直向上寻找package.json的所在目录，或者是node_modules目录，最后终止在用户根目录。 查看安装的模块及依赖查看全局模块及依赖1$ npm ls -g 查看局部模块及依赖1$ npm ls 卸载模块全局卸载模块1$ npm uninstall &lt;Module Name&gt; -g 局部卸载模块1$ npm uninstall &lt;Module Name&gt; 缓存验证1$ npm cache verify 清理缓存--force强制的意思1$ npm cache clean --force 检查模块是否已经过时1$ npm outdated 更新模块1$ npm update 升级npm1$ npm i -g npm 查看npm版本1$ npm -v 查看某个模块的版本号1$ npm list &lt;Module name&gt; 搜索模块1$ npm search &lt;Module name&gt; 相关链接：NPM 官网NPM 使用介绍NPM 常用命令详解 转载请注明出处文章有问题请指出]]></content>
      <categories>
        <category>终端命令</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[brew命令的使用]]></title>
    <url>%2F2017%2F07%2F18%2FUseBrew%2F</url>
    <content type="text"><![CDATA[文章摘要：介绍brew一些常用命令的使用 查看brew帮助 1$ brew help 搜索软件 1$ brew search [TEXT|/REGEX/] 安装软件 1$ brew install FORMULA... 卸载软件 1$ brew uninstall FORMULA... 显示已经安装的软件列表 1$ brew list [FORMULA...] 查看过期的软件 1$ brew outdated 更新 Homebrew 自己 1$ brew update 更新某个具体软件 1$ brew upgrade [FORMULA...] 更新所有软件 1$ brew upgrade 查看软件信息、网站、选项 1$ brew (info|home|options) [FORMULA...] 清除软件老版本 1$ brew cleanup 清除某个软件老版本 1$ brew cleanup FORMULA... 查看配置 1$ brew config 查看有没有安装的问题 1$ brew doctor 更新和软件升级 1$ brew update &amp;&amp; brew upgrade 相关链接：Homebrew官网 转载请注明出处文章有问题请指出]]></content>
      <categories>
        <category>终端命令</category>
      </categories>
      <tags>
        <tag>brew</tag>
      </tags>
  </entry>
</search>