<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JokerZheng of Blog</title>
  <subtitle>Life doesn&#39;t get easier, you just get stronger.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://swiftbman.github.io/"/>
  <updated>2017-07-27T06:52:29.000Z</updated>
  <id>https://swiftbman.github.io/</id>
  
  <author>
    <name>JokerZheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于git的使用</title>
    <link href="https://swiftbman.github.io/2017/07/26/%E5%85%B3%E4%BA%8Egit%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://swiftbman.github.io/2017/07/26/关于git的使用/</id>
    <published>2017-07-26T02:07:49.000Z</published>
    <updated>2017-07-27T06:52:29.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p><excerpt in="" index="" |="" 首页摘要=""><br>    <div class="note default"><h3 id="文章摘要：git常用命令的使用"><a href="#文章摘要：git常用命令的使用" class="headerlink" title="文章摘要：git常用命令的使用"></a>文章摘要：git常用命令的使用</h3></div><br> <a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<hr>
<ol>
<li>什么是Git？<br>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</li>
<li>Git 与 SVN 区别？<br>GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。<br>如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。<br>Git 与 SVN 区别点：<br>(1) GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。<br>(2) GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。<br>(3) GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。<br>(4) GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。<br>(5) GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li>
<li><p>Git安装配置<br>Git 各平台安装包下载地址为：<a href="http://git-scm.com/downloads" target="_blank" rel="external">http://git-scm.com/downloads</a><br>Mac系统下载后安装即可。<br>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install git</div></pre></td></tr></table></figure>
</li>
<li><p>Git工作流程<br>一般工作流程如下：<br>(1) 克隆 Git 资源作为工作目录。<br>(2) 在克隆的资源上添加或修改文件。<br>(3) 如果其他人修改了，你可以更新资源。<br>(4) 在提交前查看修改。<br>(5) 提交修改。<br>(6) 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</p>
</li>
<li><p>同步到远程仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ mkdir ceshi                   # 创建ceshi文件夹</div><div class="line">$ cd ceshi                      # 转到ceshi目录</div><div class="line">$ git init                      # 初始化git</div><div class="line">$ echo &quot;# ceshi&quot; &gt;&gt; README.md   # 写入# ceshi到 README.md</div><div class="line">$ git add README.md             # 添加</div><div class="line">$ git commit -m &quot;first commit&quot;  # 提交</div><div class="line">$ git remote add origin https://git.coding.net/SwiftMan/ceshi.git # 添加远程仓库地址</div><div class="line">$ git push -u origin master # 同步到远程仓库</div></pre></td></tr></table></figure>
</li>
<li><p>git的详细使用</p>
</li>
</ol>
<ul>
<li><p>Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &apos;runoob&apos; </div><div class="line">$ git config --global user.email test@runoob.com</div></pre></td></tr></table></figure>
</li>
<li><p>创建仓库<br>Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。<br>在执行完成 git init 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN 会在每个子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git init   # 该命令执行完后会在当前目录生成一个 .git 目录</div><div class="line">$ git init newrepo # 使用我们指定目录作为Git仓库</div></pre></td></tr></table></figure>
</li>
<li><p>以下命令将目录下以 .c 结尾及 README 文件提交到仓库中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add *.c</div><div class="line">$ git add README</div><div class="line">$ git commit -m &quot;初始化项目版本&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>我们使用 git clone 从现有 Git 仓库中拷贝项目（类似 svn checkout）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ git clone &lt;repo&gt;</div><div class="line">$ git clone &lt;repo&gt; &lt;directory&gt;</div><div class="line">参数说明：</div><div class="line">repo:Git 仓库。</div><div class="line">directory:本地目录。</div><div class="line">例如要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</div><div class="line">$ git clone git://github.com/schacon/grit.git</div><div class="line">执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。</div><div class="line">如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</div><div class="line">$ git clone git://github.com/schacon/grit.git mygrit</div><div class="line">$ git status -s # 命令用于查看项目的当前状态, -s 参数，以获得简短的结果输出</div></pre></td></tr></table></figure>
</li>
<li><p>git diff</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git diff # 尚未缓存的改动</div><div class="line">$ git diff --cached # 查看已缓存的改动</div><div class="line">$ git diff HEAD # 查看已缓存的与未缓存的所有改动</div><div class="line">$ git diff --stat # 显示摘要而非整个 diff</div></pre></td></tr></table></figure>
</li>
<li><p>git commit</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git commit -m ‘ddd‘ #  将缓存区内容添加到仓库中</div><div class="line">如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步</div><div class="line">$ git commit -am &apos;修改 hello.php 文件&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>$ git reset HEAD – hello.php  # 取消hello.php的缓存</p>
</li>
<li>git rm<br>git rm 会将条目从缓存区中移除。这与 git reset HEAD 将条目取消缓存是有区别的。 “取消缓存”的意思就是将缓存区恢复为我们做出修改之前的样子。<br>默认情况下，git rm -f file 会将文件从缓存区和你的硬盘中（工作目录）删除。<br>如果你要在工作目录中留着该文件，可以使用 git rm –cached：</li>
<li>git mv<br>git mv 命令做得所有事情就是 git rm –cached 命令的操作， 重命名磁盘上的文件，然后再执行 git add 把新文件添加到缓存区。</li>
<li><p>git remote</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git remote # 要查看当前配置有哪些远程仓库</div><div class="line">$ git remote -v # 执行时加上 -v 参数，你还可以看到每个别名的实际链接地址</div></pre></td></tr></table></figure>
</li>
<li><p>提取远程仓库<br>Git 有两个命令用来提取远程仓库的更新。<br>1、从远程仓库下载新分支与数据：<br>git fetch<br>该命令执行完后需要执行git merge 远程分支到你所在的分支。<br>2、从远端仓库提取数据并尝试合并到当前分支：<br>git pull<br>该命令就是在执行 git fetch 之后紧接着执行 git merge 远程分支到你所在的任意分支。<br>假设你配置好了一个远程仓库，并且你想要提取更新的数据，你可以首先执行 git fetch [alias] 告诉 Git 去获取它有你没有的数据，然后你可以执行 git merge [alias]/[branch] 以将服务器上的任何更新（假设有人这时候推送到服务器了）合并到你的当前分支。<br>推送你的新分支与数据到某个远端仓库命令<br>$ git push [alias] [branch]<br>以上命令将你的 [branch] 分支推送成为 [alias] 远程仓库上的 [branch] 分支，实例如下。</p>
</li>
<li>删除远程仓库<br>删除远程仓库你可以使用命令：<br>git remote rm [别名]</li>
<li>建立分支<br>要先commit一次才会真正建立master分支<br>创建分支命令：<br>$ git branch (branchname)<br>切换分支命令:<br>$ git checkout (branchname)<br>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。<br>合并分支命令:<br>$ git merge<br>没有参数时，git branch 会列出你在本地的分支<br>$ git branch<br>我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。</li>
<li>删除分支<br>$ git branch -d/-D(没有第一次合并过分支的时候用-D) (branchname)</li>
<li><p>查看提交历史</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ git log # 查看提交历史</div><div class="line">$ git log --oneline # 查看历史记录的简洁版本</div><div class="line">$ git log --oneline --graph # 查看历史中什么时候出现了分支、合并</div><div class="line">$ git log --reverse --oneline # &apos;--reverse&apos;参数来逆向显示所有日志</div><div class="line"></div><div class="line">如果只想查找指定用户的提交日志可以使用命令：git log --author , 例如，比方说我们要找 Git 源码中 Linus 提交的部分：</div><div class="line">$ git log --author=Linus --oneline -5</div><div class="line"></div><div class="line">如果你要指定日期，可以执行几个选项：--since 和 --before，但是你也可以用 --until 和 --after。 </div><div class="line">例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 --no-merges 选项以隐藏合并提交）：</div><div class="line">$ git log --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges</div></pre></td></tr></table></figure>
</li>
<li><p>Git 标签</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ git tag -a v1.0  # 创建带注解的标签</div><div class="line"></div><div class="line">$ git log --oneline --decorate --graph # 注意当我们执行 git log --decorate 时，我们可以看到我们的标签了</div><div class="line"></div><div class="line">$ git tag # 查看所有标签</div><div class="line"></div><div class="line">如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。</div><div class="line">例如，假设我们发布了提交 85fc7e7(上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：</div><div class="line">git tag -a v0.9 85fc7e7</div><div class="line"></div><div class="line">指定标签信息命令：</div><div class="line">$ git tag -a &lt;tagname&gt; -m &quot;w3cschool.cc标签&quot;</div><div class="line"></div><div class="line">PGP签名标签命令：</div><div class="line">$ git tag -s &lt;tagname&gt; -m &quot;w3cschool.cc标签&quot;</div><div class="line"></div><div class="line">$ git tag -d v1.0 # 删除标签</div><div class="line"></div><div class="line">查看此版本所修改的内容</div><div class="line">$ git show v1.0</div></pre></td></tr></table></figure>
</li>
</ul>
<!-- 内容 -->
<hr>
<div class="note info"><h4 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h4><p><a href="http://www.runoob.com/git/git-tutorial.html" target="_blank" rel="external">Git 教程</a></p>
</div>
<div class="note warning"><p>转载请注明出处<br>文章有问题请指出</p>
</div>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    &lt;div class=&quot;note default&quot;&gt;&lt;h3 id=&quot;文章摘要：git常用命令的使用&quot;&gt;&lt;a href=&quot;#文章摘要：git常用命令的使用&quot; class=&quot;headerlink&quot; title=&quot;文章摘要：git常用命令的使用&quot;&gt;&lt;/a&gt;文章摘要：git常用命令的使用&lt;/h3&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="https://swiftbman.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://swiftbman.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发零碎知识点整理</title>
    <link href="https://swiftbman.github.io/2017/07/25/iOS%E5%BC%80%E5%8F%91%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <id>https://swiftbman.github.io/2017/07/25/iOS开发零碎知识点整理/</id>
    <published>2017-07-25T06:20:19.000Z</published>
    <updated>2017-07-26T01:28:46.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p><excerpt in="" index="" |="" 首页摘要=""><br>    <div class="note default"><h3 id="文章摘要：整理iOS零碎知识点"><a href="#文章摘要：整理iOS零碎知识点" class="headerlink" title="文章摘要：整理iOS零碎知识点"></a>文章摘要：整理iOS零碎知识点</h3></div><br> <a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<hr>
<ol>
<li><p>调用代码使应用进入后台</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] performSelector:<span class="keyword">@selector</span>(suspend)];</div></pre></td></tr></table></figure>
</li>
<li><p>带中文的URL处理</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// http://static.tripbe.com/videofiles/视频/我的自拍视频.mp4</span></div><div class="line"><span class="built_in">NSString</span> *path =(__bridge_transfer <span class="built_in">NSString</span> *)<span class="built_in">CFURLCreateStringByReplacingPercentEscapesUsingEncoding</span>(<span class="literal">NULL</span>, </div><div class="line">    (__bridge <span class="built_in">CFStringRef</span>)model.mp4_url, </div><div class="line">    <span class="built_in">CFSTR</span>(<span class="string">""</span>), </div><div class="line">    <span class="built_in">CFStringConvertNSStringEncodingToEncoding</span>(<span class="built_in">NSUTF8StringEncoding</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>获取WebView高度</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView  &#123;  </div><div class="line">    <span class="built_in">CGFloat</span> height = [[webView stringByEvaluatingJavaScriptFromString:<span class="string">@"document.body.offsetHeight"</span>] floatValue];  </div><div class="line">    <span class="built_in">CGRect</span> frame = webView.frame;  </div><div class="line">    webView.frame = <span class="built_in">CGRectMake</span>(frame.origin.x, frame.origin.y, frame.size.width, height);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>View设置图片</p>
<figure class="highlight objc"><figcaption><span>第一种方法</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIColor</span> *bgColor = [<span class="built_in">UIColor</span> colorWithPatternImage: [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"bgImg.png"</span>];</div><div class="line"><span class="built_in">UIView</span> *myView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">320</span>, <span class="number">480</span>)];</div><div class="line">[myView setBackGroundColor:bgColor];</div></pre></td></tr></table></figure>
<figure class="highlight objc"><figcaption><span>第二种方法</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"yourPicName@2x.png"</span>];</div><div class="line">yourView.layer.contents = (__bridge <span class="keyword">id</span>)image.CGImage;</div><div class="line"><span class="comment">// 设置显示的图片范围</span></div><div class="line">yourView.layer.contentsCenter = <span class="built_in">CGRectMake</span>(<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,<span class="number">0.5</span>);<span class="comment">//四个值在0-1之间，对应的为x，y，width，height。</span></div></pre></td></tr></table></figure></li>
<li><p>去掉TableView 底部分割线</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yourTableView.tableFooterView = [<span class="built_in">UIView</span> new];</div></pre></td></tr></table></figure>
</li>
<li><p>更改cell分割线位置</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLayoutSubviews &#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.mytableview respondsToSelector:<span class="keyword">@selector</span>(setSeparatorInset:)]) &#123;</div><div class="line">        [<span class="keyword">self</span>.mytableview setSeparatorInset:<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)];</div><div class="line"> </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.mytableview respondsToSelector:<span class="keyword">@selector</span>(setLayoutMargins:)])  &#123;</div><div class="line">        [<span class="keyword">self</span>.mytableview setLayoutMargins:<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta"># pragma mark - cell分割线</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView willDisplayCell:(<span class="built_in">UITableViewCell</span> *)cell forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ([cell respondsToSelector:<span class="keyword">@selector</span>(setSeparatorInset:)])&#123;</div><div class="line">        [cell setSeparatorInset:<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ([cell respondsToSelector:<span class="keyword">@selector</span>(setLayoutMargins:)]) &#123;</div><div class="line">        [cell setLayoutMargins:<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>UILabel和UIImageView的交互userInteractionEabled默认为NO。那么如果你把这两个类做为父试图的话，里面的所有东东都不可以点击哦。</p>
</li>
<li><p>搜索条Cancel改标题</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)searchBarShouldBeginEditing:(<span class="built_in">UISearchBar</span> *)searchBar</div><div class="line">&#123;</div><div class="line">    searchController.searchBar.showsCancelButton = <span class="literal">YES</span>;</div><div class="line">    <span class="built_in">UIButton</span> *canceLBtn = [searchController.searchBar valueForKey:<span class="string">@"cancelButton"</span>];</div><div class="line">    [canceLBtn setTitle:<span class="string">@"取消"</span> forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    [canceLBtn setTitleColor:[<span class="built_in">UIColor</span> colorWithRed:<span class="number">14.0</span>/<span class="number">255.0</span> green:<span class="number">180.0</span>/<span class="number">255.0</span> blue:<span class="number">0.0</span>/<span class="number">255.0</span> alpha:<span class="number">1.00</span>] forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    searchBar.showsCancelButton = <span class="literal">YES</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>TableView回收键盘</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yourTableView.keyboardDismissMode = <span class="built_in">UIScrollViewKeyboardDismissModeOnDrag</span>;</div><div class="line"><span class="comment">// 另外一个枚举为UIScrollViewKeyboardDismissModeInteractive，表示在键盘内部滑动，键盘逐渐下去。</span></div></pre></td></tr></table></figure>
</li>
<li><p>NSTimer<br>NSTimer计算的时间并不精确<br>NSTimer需要添加到runLoop运行才会执行，但是这个runLoop的线程必须是已经开启。<br>NSTimer会对它的tagert进行retain，我们必须对其重复性的使用intvailte停止。target如果是self（指UIViewController），那么VC的retainCount+1，如果你不释放NSTimer，那么你的VC就不会dealloc了，内存泄漏了。</p>
</li>
<li><p>十六进制取颜</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">UIColor</span> *)colorWithHexString:(<span class="built_in">NSString</span> *)color</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *cString = [[color stringByTrimmingCharactersInSet:[<span class="built_in">NSCharacterSet</span> whitespaceAndNewlineCharacterSet]] uppercaseString];</div><div class="line"> </div><div class="line">    <span class="comment">// String should be 6 or 8 characters</span></div><div class="line">    <span class="keyword">if</span> ([cString length] &lt; <span class="number">6</span>) &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// strip 0X if it appears</span></div><div class="line">    <span class="keyword">if</span> ([cString hasPrefix:<span class="string">@"0X"</span>])</div><div class="line">        cString = [cString substringFromIndex:<span class="number">2</span>];</div><div class="line">    <span class="keyword">if</span> ([cString hasPrefix:<span class="string">@"#"</span>])</div><div class="line">        cString = [cString substringFromIndex:<span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> ([cString length] != <span class="number">6</span>)</div><div class="line">        <span class="keyword">return</span> [<span class="built_in">UIColor</span> clearColor];</div><div class="line"> </div><div class="line">    <span class="comment">// Separate into r, g, b substrings</span></div><div class="line">    <span class="built_in">NSRange</span> range;</div><div class="line">    range.location = <span class="number">0</span>;</div><div class="line">    range.length = <span class="number">2</span>;</div><div class="line"> </div><div class="line">    <span class="comment">//r</span></div><div class="line">    <span class="built_in">NSString</span> *rString = [cString substringWithRange:range];</div><div class="line"> </div><div class="line">    <span class="comment">//g</span></div><div class="line">    range.location = <span class="number">2</span>;</div><div class="line">    <span class="built_in">NSString</span> *gString = [cString substringWithRange:range];</div><div class="line"> </div><div class="line">    <span class="comment">//b</span></div><div class="line">    range.location = <span class="number">4</span>;</div><div class="line">    <span class="built_in">NSString</span> *bString = [cString substringWithRange:range];</div><div class="line"> </div><div class="line">    <span class="comment">// Scan values</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> r, g, b;</div><div class="line">    [[<span class="built_in">NSScanner</span> scannerWithString:rString] scanHexInt:&amp;r];</div><div class="line">    [[<span class="built_in">NSScanner</span> scannerWithString:gString] scanHexInt:&amp;g];</div><div class="line">    [[<span class="built_in">NSScanner</span> scannerWithString:bString] scanHexInt:&amp;b];</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> [<span class="built_in">UIColor</span> colorWithRed:((<span class="keyword">float</span>) r / <span class="number">255.0</span>f) green:((<span class="keyword">float</span>) g / <span class="number">255.0</span>f) blue:((<span class="keyword">float</span>) b / <span class="number">255.0</span>f) alpha:<span class="number">1.0</span>f];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>取今天是星期几</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">NSString</span> *) getweekDayStringWithDate:(<span class="built_in">NSDate</span> *) date</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSCalendar</span> * calendar = [[<span class="built_in">NSCalendar</span> alloc] initWithCalendarIdentifier:<span class="built_in">NSGregorianCalendar</span>]; <span class="comment">// 指定日历的算法</span></div><div class="line">    <span class="built_in">NSDateComponents</span> *comps = [calendar components:<span class="built_in">NSWeekdayCalendarUnit</span> fromDate:date];</div><div class="line"> </div><div class="line">    <span class="comment">// 1 是周日，2是周一 3.以此类推</span></div><div class="line"> </div><div class="line">    <span class="built_in">NSNumber</span> * weekNumber = @([comps weekday]);</div><div class="line">    <span class="built_in">NSInteger</span> weekInt = [weekNumber integerValue];</div><div class="line">    <span class="built_in">NSString</span> *weekDayString = <span class="string">@"(周一)"</span>;</div><div class="line">    <span class="keyword">switch</span> (weekInt) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        &#123;</div><div class="line">            weekDayString = <span class="string">@"(周日)"</span>;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"> </div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        &#123;</div><div class="line">            weekDayString = <span class="string">@"(周一)"</span>;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"> </div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">        &#123;</div><div class="line">            weekDayString = <span class="string">@"(周二)"</span>;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"> </div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">        &#123;</div><div class="line">            weekDayString = <span class="string">@"(周三)"</span>;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"> </div><div class="line">        <span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">        &#123;</div><div class="line">            weekDayString = <span class="string">@"(周四)"</span>;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"> </div><div class="line">        <span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">        &#123;</div><div class="line">            weekDayString = <span class="string">@"(周五)"</span>;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"> </div><div class="line">        <span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">        &#123;</div><div class="line">            weekDayString = <span class="string">@"(周六)"</span>;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"> </div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> weekDayString;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>UIView的部分圆角问题</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIView</span> *view2 = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">120</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">80</span>)];</div><div class="line">view2.backgroundColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">[<span class="keyword">self</span>.view addSubview:view2];</div><div class="line"> </div><div class="line"><span class="built_in">UIBezierPath</span> *maskPath = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:view2.bounds byRoundingCorners:<span class="built_in">UIRectCornerBottomLeft</span> | <span class="built_in">UIRectCornerBottomRight</span> cornerRadii:<span class="built_in">CGSizeMake</span>(<span class="number">10</span>, <span class="number">10</span>)];</div><div class="line"><span class="built_in">CAShapeLayer</span> *maskLayer = [[<span class="built_in">CAShapeLayer</span> alloc] init];</div><div class="line">maskLayer.frame = view2.bounds;</div><div class="line">maskLayer.path = maskPath.CGPath;</div><div class="line">view2.layer.mask = maskLayer;</div><div class="line"><span class="comment">//其中，byRoundingCorners:UIRectCornerBottomLeft |UIRectCornerBottomRight</span></div><div class="line"><span class="comment">//指定了需要成为圆角的角。该参数是UIRectCorner类型的，可选的值有：</span></div><div class="line"><span class="comment">//* UIRectCornerTopLeft</span></div><div class="line"><span class="comment">//* UIRectCornerTopRight</span></div><div class="line"><span class="comment">//* UIRectCornerBottomLeft</span></div><div class="line"><span class="comment">//* UIRectCornerBottomRight</span></div><div class="line"><span class="comment">//* UIRectCornerAllCorners</span></div></pre></td></tr></table></figure>
</li>
<li><p>滑动时隐藏navigationBar</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.navigationController.hidesBarsOnSwipe = <span class="literal">YES</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>iOS画虚线</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;QuartzCore/QuartzCore.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="built_in">CGContextRef</span> context =<span class="built_in">UIGraphicsGetCurrentContext</span>();  </div><div class="line"><span class="built_in">CGContextBeginPath</span>(context);  </div><div class="line"><span class="built_in">CGContextSetLineWidth</span>(context, <span class="number">2.0</span>);  </div><div class="line"><span class="built_in">CGContextSetStrokeColorWithColor</span>(context, [<span class="built_in">UIColor</span> whiteColor].CGColor);  </div><div class="line"><span class="built_in">CGFloat</span> lengths[] = &#123;<span class="number">10</span>,<span class="number">10</span>&#125;;  </div><div class="line"><span class="built_in">CGContextSetLineDash</span>(context, <span class="number">0</span>, lengths,<span class="number">2</span>);  </div><div class="line"><span class="built_in">CGContextMoveToPoint</span>(context, <span class="number">10.0</span>, <span class="number">20.0</span>);  </div><div class="line"><span class="built_in">CGContextAddLineToPoint</span>(context, <span class="number">310.0</span>,<span class="number">20.0</span>);  </div><div class="line"><span class="built_in">CGContextStrokePath</span>(context);  </div><div class="line"><span class="built_in">CGContextClosePath</span>(context);</div></pre></td></tr></table></figure>
</li>
<li><p>自动布局多行UILabel问题</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 需要设置其preferredMaxLayoutWidth属性才能正常显示多行内容。另外如果出现显示不全文本，可以在计算的结果基础上＋0.5。</span></div><div class="line"><span class="built_in">CGFloat</span> h = [model.message boundingRectWithSize:<span class="built_in">CGSizeMake</span>([<span class="built_in">UIScreen</span> mainScreen].bounds.size.width - kGAP-kAvatar_Size - <span class="number">2</span>*kGAP, <span class="built_in">CGFLOAT_MAX</span>) options:<span class="built_in">NSStringDrawingUsesLineFragmentOrigin</span> attributes:attributes context:<span class="literal">nil</span>].size.height+<span class="number">0.5</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>禁止运行时自动锁屏</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setIdleTimerDisabled:<span class="literal">YES</span>];</div></pre></td></tr></table></figure>
</li>
<li><p>强制App直接退出</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)exitApplication &#123;</div><div class="line">    AppDelegate *app = [<span class="built_in">UIApplication</span> sharedApplication].delegate;</div><div class="line">    <span class="built_in">UIWindow</span> *window = app.window;</div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:<span class="number">1.0</span>f animations:^&#123;</div><div class="line">        window.alpha = <span class="number">0</span>;</div><div class="line">    &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">        exit(<span class="number">0</span>);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Label行间距</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableAttributedString</span> *attributedString =    </div><div class="line">   [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:<span class="keyword">self</span>.contentLabel.text];</div><div class="line">    <span class="built_in">NSMutableParagraphStyle</span> *paragraphStyle =  [[<span class="built_in">NSMutableParagraphStyle</span> alloc] init];  </div><div class="line">   [paragraphStyle setLineSpacing:<span class="number">3</span>];</div><div class="line"> </div><div class="line"><span class="comment">// 调整行间距       </span></div><div class="line">[attributedString addAttribute:<span class="built_in">NSParagraphStyleAttributeName</span> </div><div class="line">                         value:paragraphStyle </div><div class="line">                         range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, [<span class="keyword">self</span>.contentLabel.text length])];</div><div class="line"><span class="keyword">self</span>.contentLabel.attributedText = attributedString;</div></pre></td></tr></table></figure>
</li>
<li><p>MRC和ARC混编设置方式<br>在XCode中targets的build phases选项下Compile Sources下选择-&gt;不需要arc编译的文件，双击输入 -fno-objc-arc 即可<br>MRC工程中也可以使用ARC的类，方法如下：<br>在XCode中targets的build phases选项下Compile Sources下选择要使用arc编译的文件，双击输入 -fobjc-arc 即可</p>
</li>
<li><p>cell对勾颜色修改</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yourTableView.tintColor = [<span class="built_in">UIColor</span> redColor];</div></pre></td></tr></table></figure>
</li>
<li><p>同时按两个按钮问题</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[button setExclusiveTouch:<span class="literal">YES</span>];</div></pre></td></tr></table></figure>
</li>
<li><p>修改占位符颜色和大小</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">textField.placeholder = <span class="string">@"请输入用户名"</span>;  </div><div class="line">[textField setValue:[<span class="built_in">UIColor</span> redColor] forKeyPath:<span class="string">@"_placeholderLabel.textColor"</span>];  </div><div class="line">[textField setValue:[<span class="built_in">UIFont</span> boldSystemFontOfSize:<span class="number">16</span>] forKeyPath:<span class="string">@"_placeholderLabel.font"</span>];</div></pre></td></tr></table></figure>
</li>
<li><p>禁止复制粘贴</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)canPerformAction:(SEL)action withSender:(<span class="keyword">id</span>)sender</div><div class="line">&#123;</div><div class="line">     <span class="keyword">if</span> ([<span class="built_in">UIMenuController</span> sharedMenuController]) &#123;</div><div class="line">       [<span class="built_in">UIMenuController</span> sharedMenuController].menuVisible = <span class="literal">NO</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>进入App在AppStore页面</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 先用iTunes Link Maker找到软件在访问地址，格式为itms-apps://ax.itunes.apple.com/…，然后复制链接！</span></div><div class="line"><span class="meta">#define  ITUNESLINK   @<span class="meta-string">"itms-apps://ax.itunes.apple.com/..."</span></span></div><div class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:ITUNESLINK];</div><div class="line"><span class="keyword">if</span>([[<span class="built_in">UIApplication</span> sharedApplication] canOpenURL:url])&#123;</div><div class="line">     [[<span class="built_in">UIApplication</span> sharedApplication] openURL:url];</div><div class="line">&#125;</div><div class="line"><span class="comment">// 如果把上述地址中itms-apps改为http就可以在浏览器中打开了。可以把这个地址放在自己的网站里，链接到app store。 iTunes Link Maker地址：http://itunes.apple.com/linkmaker</span></div></pre></td></tr></table></figure>
</li>
<li><p>隐藏系统tabbar</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1、单个处理</span></div><div class="line">YourViewController *yourVC = [YourViewController new];</div><div class="line">yourVC.hidesBottomBarWhenPushed = <span class="literal">YES</span>;</div><div class="line">[<span class="keyword">self</span>.navigationController pushViewController:yourVC animated:<span class="literal">YES</span>];</div><div class="line"><span class="comment">// 2.统一在基类里面处理,新建一个类BaseNavigationController继承UINavigationController，然后重写 </span></div><div class="line">-(<span class="keyword">void</span>)pushViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated这个方法。所有的push事件都走此方法。</div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BaseNavigationController</span> : <span class="title">UINavigationController</span></span></div><div class="line"> </div><div class="line"><span class="keyword">@end</span></div><div class="line">-(<span class="keyword">void</span>)pushViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated&#123;</div><div class="line">    [<span class="keyword">super</span> pushViewController:viewController animated:animated];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.viewControllers.count&gt;<span class="number">1</span>) &#123;</div><div class="line">        viewController.hidesBottomBarWhenPushed = <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>取消系统的返回手势</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer.enabled = <span class="literal">NO</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>改WebView字体/颜色</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UIWebView设置字体大小，颜色，字体： UIWebView无法通过自身的属性设置字体的一些属性，只能通过html代码进行设置 在webView加载完毕后：</span></div><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;  </div><div class="line">    <span class="built_in">NSString</span> *str = <span class="string">@"document.getElementsByTagName('body')[0].style.webkitTextSizeAdjust= '60%'"</span>;  </div><div class="line">    [webView stringByEvaluatingJavaScriptFromString:str]; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">NSString</span> *jsString = [[<span class="built_in">NSString</span> alloc] initWithFormat:<span class="string">@"document.body.style.fontSize=%f;document.body.style.color=%@"</span>,fontSize,fontColor];   </div><div class="line">[webView stringByEvaluatingJavaScriptFromString:jsString];</div></pre></td></tr></table></figure>
</li>
<li><p>获取系统版本号</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种</span></div><div class="line"><span class="built_in">NSString</span> * filePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"Info"</span> ofType:<span class="string">@"plist"</span>];</div><div class="line">    <span class="built_in">NSDictionary</span> * dic = [<span class="built_in">NSDictionary</span> dictionaryWithContentsOfFile:filePath];</div><div class="line">    <span class="built_in">NSString</span> * version = dic[<span class="string">@"CFBundleShortVersionString"</span>];</div><div class="line"><span class="comment">// 第二种</span></div><div class="line"><span class="built_in">NSString</span> * ver = [<span class="built_in">NSBundle</span> mainBundle].infoDictionary[<span class="string">@"CFBundleShortVersionString"</span>];</div></pre></td></tr></table></figure>
</li>
<li><p>CocoaPods无法显示类名<br><img src="./pods1.png" alt="pods1"><br><img src="./pods2.png" alt="pods2"></p>
</li>
<li>设置pch文件<br>1、pch原理：pch里面的内容被项目中的所有文件共有<br>2、存放一些公用的宏、头文件<br>3、pch需要提前编译<br>$(SRCROOT)/Base/BasePrefixHeader.pch<br><img src="./pch.png" alt="pch"></li>
<li><p>在oc项目中使用Swift<br><img src="./sw1.png" alt="sw1"><br>上面的修改了一个配置项，有一个Product Module Name在后面会使用。<br>在工程里面点击File/New/File…,选择iOS/Source/Cocoa Touch Class,按照如下填写创建一个新的文件：<br><img src="./sw2.png" alt="sw2"><br>上图中的Subclass of一定要设置为NSObject或其子类，否则OC工程将不会找到该类。<br>点击确认后会选择保存路径，点击Create，出现如下界面：<br><img src="./sw3.png" alt="sw3"><br>这个界面是询问是否创建桥接的头文件，这个文件在Swift调用OC代码的时候比较管用，但是在OC中调用Swift的时候我发现没有什么卵用。<br>选择Don’t Create按钮。<br>在Test.swift中添加如下的代码(解释都在注释里面了)：<br>我们在我们想要调用Swift类的方法里面引入头文件：”Product Module Name-Swift.h”,其中Product Module Name替换成在上面配置项中显示的内容，例如：<br>// 引入Swift头文件 #import “OCAndSwift-Swift.h”</p>
</li>
<li><p>解决横屏状态栏默认隐藏的问题</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在Info.plist文件添加View controller-based status bar appearance 设置为YES；</span></div><div class="line"><span class="comment">// 设置状态栏样式</span></div><div class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle &#123;</div><div class="line">    <span class="comment">// 白色</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">UIStatusBarStyleLightContent</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 在需要显示状态的控制器（横屏时）敲入以下代码：</span></div><div class="line"><span class="comment">// 设置是否隐藏</span></div><div class="line">- (<span class="built_in">BOOL</span>)prefersStatusBarHidden &#123;</div><div class="line">    <span class="comment">//    [super prefersStatusBarHidden];</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//设置隐藏动画</span></div><div class="line">- (<span class="built_in">UIStatusBarAnimation</span>)preferredStatusBarUpdateAnimation &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">UIStatusBarAnimationNone</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>iOS横竖屏适配</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)viewWillTransitionToSize:(<span class="built_in">CGSize</span>)size withTransitionCoordinator:(<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerTransitionCoordinator</span>&gt;)coordinator</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewWillTransitionToSize:size withTransitionCoordinator:coordinator];</div><div class="line">    [coordinator animateAlongsideTransition:^(<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerTransitionCoordinatorContext</span>&gt; context) &#123;</div><div class="line">        <span class="comment">//计算旋转之后的宽度并赋值</span></div><div class="line">        <span class="built_in">CGSize</span> screen = [<span class="built_in">UIScreen</span> mainScreen].bounds.size;</div><div class="line">        <span class="comment">//界面处理逻辑</span></div><div class="line">        <span class="keyword">self</span>.lineChartView.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">30</span>, screen.width, <span class="number">200.0</span>);</div><div class="line">        <span class="comment">//动画播放完成之后</span></div><div class="line">        <span class="keyword">if</span>(screen.width &gt; screen.height)&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"横屏"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"竖屏"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; completion:^(<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerTransitionCoordinatorContext</span>&gt; context) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"动画播放完之后处理"</span>);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<!-- 内容 -->
<hr>
<div class="note warning"><p>转载请注明出处<br>文章有问题请指出</p>
</div>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    &lt;div class=&quot;note default&quot;&gt;&lt;h3 id=&quot;文章摘要：整理iOS零碎知识点&quot;&gt;&lt;a href=&quot;#文章摘要：整理iOS零碎知识点&quot; class=&quot;headerlink&quot; title=&quot;文章摘要：整理iOS零碎知识点&quot;&gt;&lt;/a&gt;文章摘要：整理iOS零碎知识点&lt;/h3&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://swiftbman.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://swiftbman.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS常用框架精选</title>
    <link href="https://swiftbman.github.io/2017/07/21/iOS%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E7%B2%BE%E9%80%89/"/>
    <id>https://swiftbman.github.io/2017/07/21/iOS常用框架精选/</id>
    <published>2017-07-21T07:26:02.000Z</published>
    <updated>2017-07-24T06:01:48.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p><excerpt in="" index="" |="" 首页摘要=""><br>    <div class="note default"><h3 id="文章摘要：精选iOS常用框架"><a href="#文章摘要：精选iOS常用框架" class="headerlink" title="文章摘要：精选iOS常用框架"></a>文章摘要：精选iOS常用框架</h3></div><br> <a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<hr>
<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><ol>
<li><a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="external">lottie</a> —— 利用json做动画</li>
<li><a href="https://github.com/YouXianMing/Animations" target="_blank" rel="external">Animations</a> —— 动画库，很炫</li>
<li><a href="https://github.com/KittenYang/A-GUIDE-TO-iOS-ANIMATION" target="_blank" rel="external">A-GUIDE-TO-iOS-ANIMATION</a> —— 动画指南</li>
<li><a href="https://github.com/facebook/pop" target="_blank" rel="external">pop</a> —— facebook动画框架</li>
<li><a href="https://github.com/yixiangboy/IOSAnimationDemo" target="_blank" rel="external">IOSAnimationDemo</a> —— iOS 动画demo</li>
<li><a href="https://github.com/ColinEberhardt/VCTransitionsLibrary" target="_blank" rel="external">VCTransitionLibrary</a> —— 控制器转场动画库</li>
</ol>
<h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><h4 id="整体结构布局"><a href="#整体结构布局" class="headerlink" title="整体结构布局"></a>整体结构布局</h4><ol>
<li><a href="https://github.com/mutualmobile/MMDrawerController" target="_blank" rel="external">MMDrawerController</a> —— 功能最多的抽屉框架</li>
<li><a href="https://github.com/romaonthego/RESideMenu" target="_blank" rel="external">RESideMenu</a> —— 最好用的抽屉框架</li>
<li><a href="https://github.com/robbdimitrov/RDVTabBarController" target="_blank" rel="external">RDVTabBarController</a> —— 自定义tabbarController </li>
<li><a href="https://github.com/pkluz/PKRevealController" target="_blank" rel="external">PKRevealController</a> —— 非常简单的设置，高度的自定义，手势的识别非常好</li>
</ol>
<h4 id="iOS控件"><a href="#iOS控件" class="headerlink" title="iOS控件"></a>iOS控件</h4><ol>
<li><a href="https://github.com/calimarkus/JDStatusBarNotification" target="_blank" rel="external">JDStatusBarNotification</a> —— 电池栏通知 </li>
<li><a href="https://github.com/calimarkus/JDFlipNumberView" target="_blank" rel="external">JDFlipNumberView</a> —— 数字或图片翻转</li>
<li><a href="https://github.com/gsdios/SDCycleScrollView" target="_blank" rel="external">SDCycleScrollView</a> —— iOS图片、文字轮播器 </li>
<li><a href="https://github.com/zhengjinghua/StitchingImage" target="_blank" rel="external">StitchingImage</a> —— iOS 仿微信群组封面拼接控件</li>
<li><a href="https://github.com/nicklockwood/iCarousel" target="_blank" rel="external">iCarousel</a> —— 卡片切换</li>
<li><a href="https://github.com/KittenYang/KYGooeyMenu" target="_blank" rel="external">KYGooeyMenu</a> —— 带粘性的扇形菜单</li>
<li><a href="https://github.com/KittenYang/KYAnimatedPageControl" target="_blank" rel="external">KYAnimatedPageControl</a> —— 粘性小球 旋转方块 </li>
<li><a href="https://github.com/KittenYang/KYCuteView" target="_blank" rel="external">KYCuteView</a> —— 实现类似QQ消息拖拽消失的交互+GameCenter的浮动小球效果 </li>
<li><a href="https://github.com/victorBaro/VBFPopFlatButton" target="_blank" rel="external">VBFPopFlatButton</a> —— 基于pop框架实现的按钮</li>
<li><a href="https://github.com/BrownCN023/CTTextDisplayView" target="_blank" rel="external">CTTextDisplayView</a> —— CTTextDisplayView 是一个CoreText完成的图文混排视图，主要用于文本中显示表情@#URL等，类似于QQ、微博的评论图文功能。 </li>
<li><a href="https://github.com/gskbyte/GSKStretchyHeaderView" target="_blank" rel="external">GSKStretchyHeaderView</a> —— 有弹性的tableViewHeader</li>
<li><a href="https://github.com/dogo/SCLAlertView" target="_blank" rel="external">SCLAlertView</a> —— 弹出提示框</li>
<li><a href="https://github.com/dsxNiubility/SXWaveAnimate" target="_blank" rel="external">SXWaveAnimate</a> —— 水波纹</li>
<li><a href="https://github.com/questbeat/QBPopupMenu" target="_blank" rel="external">QBPopupMenu</a> —— 长按弹出菜单</li>
<li><a href="https://github.com/iphone5solo/PYSearch" target="_blank" rel="external">PYSearch</a> —— 搜索控制器</li>
<li><a href="https://github.com/jdg/MBProgressHUD" target="_blank" rel="external">MBProgressHUD</a> —— 最常用的HUD</li>
<li><a href="https://github.com/imlifengfeng/FFToast" target="_blank" rel="external">FFToast</a> —— 最全的HUD</li>
<li><a href="https://github.com/overboming/ZCAnimatedLabel" target="_blank" rel="external">ZCAnimatedLabel</a> —— UILabel动画</li>
<li><a href="https://github.com/raulriera/TextFieldEffects" target="_blank" rel="external">TextFieldEffects</a> —— 文本输入效果</li>
<li><a href="https://github.com/slackhq/SlackTextViewController" target="_blank" rel="external">SlackTextViewController</a> </li>
<li><a href="https://github.com/PrideChung/FontAwesomeKit" target="_blank" rel="external">FontAwesomeKit</a> —— Font Awesome 是非常优秀的，使用这个库可以简单地添加字体到你的项目当中，另外还有很多其它方面的功能。</li>
<li><a href="https://github.com/MortimerGoro/MGSwipeTableCell" target="_blank" rel="external">MGSwipeTableCell</a> —— 可擦除式表格单元</li>
</ol>
<h3 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h3><ol>
<li><a href="https://github.com/ameizi/awesome-ios-chart" target="_blank" rel="external">awesome-ios-chart</a> —— 图表</li>
</ol>
<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><ol>
<li><a href="https://github.com/gsdios/SDAutoLayout" target="_blank" rel="external">SDAutoLayout</a> —— 一行代码搞定自动布局 </li>
<li><a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">Masonry</a> —— 链式布局框架，很好用</li>
<li><a href="https://github.com/facebook/yoga" target="_blank" rel="external">yoga</a> —— facebook开源的布局框架（跨平台）</li>
</ol>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><ol>
<li><a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="external">AFNetworking</a> ——— 很强大</li>
<li><a href="https://github.com/kangzubin/XMNetworking" target="_blank" rel="external">XMNetworking</a> —— 基于AFNetworking二次封装</li>
</ol>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ol>
<li><a href="https://github.com/ccgus/fmdb" target="_blank" rel="external">fmdb</a> —— 简化数据操作</li>
<li><a href="https://github.com/magicalpanda/MagicalRecord" target="_blank" rel="external">MagicalRecord</a> —— MagicalRecord 就像是针对 Core Data 的一个封装，隐藏了所有跟开发者无关的东西。</li>
</ol>
<h3 id="刷新"><a href="#刷新" class="headerlink" title="刷新"></a>刷新</h3><ol>
<li><a href="https://github.com/CoderMJLee/MJRefresh" target="_blank" rel="external">MJRefresh</a> —— app刷新</li>
</ol>
<h3 id="模型转换"><a href="#模型转换" class="headerlink" title="模型转换"></a>模型转换</h3><ol>
<li><a href="https://github.com/CoderMJLee/MJExtension" target="_blank" rel="external">MJExtension</a> —— 简单好用</li>
<li><a href="https://github.com/ibireme/YYModel" target="_blank" rel="external">YYModel</a> —— 高性能的 iOS JSON 模型框架</li>
</ol>
<h3 id="图片下载"><a href="#图片下载" class="headerlink" title="图片下载"></a>图片下载</h3><ol>
<li><a href="https://github.com/rs/SDWebImage" target="_blank" rel="external">SDWebImage</a> —— 好用</li>
<li><a href="https://github.com/ibireme/YYWebImage" target="_blank" rel="external">YYWebImage</a> —— 高性能的 iOS 异步图像加载框架</li>
</ol>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><ol>
<li><a href="https://github.com/dsxNiubility/Wonderful" target="_blank" rel="external">Wonderful</a> —— 一个关于色彩的库</li>
<li><a href="https://github.com/ViccAlexander/Chameleon" target="_blank" rel="external">Chameleon</a> —— 支持Swift的颜色库</li>
</ol>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ol>
<li><a href="https://github.com/hackiftekhar/IQKeyboardManager" target="_blank" rel="external">IQKeyboardManager</a> —— 弹出键盘管理</li>
<li><a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="external">ReactiveCocoa</a> —— 响应式编程框架 </li>
<li><a href="https://github.com/soffes/SAMKeychain" target="_blank" rel="external">SAMKeychain</a> —— 存储用户名和密码</li>
<li><a href="https://github.com/dzenbot/DZNEmptyDataSet" target="_blank" rel="external">DZNEmptyDataSet</a> —— 这是 iOS 内建的标准，用于处理空表和集合视图</li>
<li><a href="https://github.com/jivesoftware/PDTSimpleCalendar" target="_blank" rel="external">PDTSimpleCalendar</a> —— 日历组件</li>
<li><a href="https://github.com/BradLarson/GPUImage" target="_blank" rel="external">GPUImage</a> —— GPUImage为我们提供了由GPU加速的相机预览效果（包括图像和视频），速度极快。</li>
<li><a href="https://github.com/nicklockwood/iRate" target="_blank" rel="external">iRate</a> —— 一个便于使用的类库，可用于督促在iPhone、Mac应用商店下载并使用你的app用户给你推荐</li>
</ol>
<h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><ol>
<li><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a> —— Alamofire 是一个写在 Swift 上的十分美观的网络文库。<!-- 内容 -->
</li>
</ol>
<hr>
<div class="note info"><h4 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h4><p><a href="http://www.jianshu.com/p/fd4441c4033e" target="_blank" rel="external">IOS第三方框架集合</a><br><a href="https://github.com/LPH5885888/OpenSource" target="_blank" rel="external">OpenSource</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=2652155701&amp;idx=1&amp;sn=ddb9e1021f7120261a04fe12e0dea821&amp;chksm=8046cf54b7314642c7a6e333696133bc8806cc8a3c1e475460b8d6cc78fa569c0245e1166e16&amp;mpshare=1&amp;scene=23&amp;srcid=0722yu4zrdZ6TczKyOD1Lmej#rd" target="_blank" rel="external">27 款 iOS 开源库，让你的开发溜到飞起</a></p>
</div>
<div class="note warning"><p>转载请注明出处<br>文章有问题请指出</p>
</div>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    &lt;div class=&quot;note default&quot;&gt;&lt;h3 id=&quot;文章摘要：精选iOS常用框架&quot;&gt;&lt;a href=&quot;#文章摘要：精选iOS常用框架&quot; class=&quot;headerlink&quot; title=&quot;文章摘要：精选iOS常用框架&quot;&gt;&lt;/a&gt;文章摘要：精选iOS常用框架&lt;/h3&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://swiftbman.github.io/categories/iOS/"/>
    
    
      <category term="框架" scheme="https://swiftbman.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>yarn一些常用命令的使用</title>
    <link href="https://swiftbman.github.io/2017/07/21/UseYarn/"/>
    <id>https://swiftbman.github.io/2017/07/21/UseYarn/</id>
    <published>2017-07-21T03:44:49.000Z</published>
    <updated>2017-07-21T05:34:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p><excerpt in="" index="" |="" 首页摘要=""><br>    <div class="note default"><h3 id="文章摘要：介绍yarn的一些常用命令的使用"><a href="#文章摘要：介绍yarn的一些常用命令的使用" class="headerlink" title="文章摘要：介绍yarn的一些常用命令的使用"></a>文章摘要：介绍yarn的一些常用命令的使用</h3></div><br> <a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<hr>
<ol>
<li>初始化项目<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn init</div></pre></td></tr></table></figure></li>
<li>添加依赖包<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ yarn add [package]</div><div class="line">$ yarn add [package]@[version]</div><div class="line">$ yarn add [package]@[tag]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ yarn add [package] --dev</div><div class="line">$ yarn add [package] --peer </div><div class="line">$ yarn add [package] --optional</div></pre></td></tr></table></figure></li>
<li>升级依赖包<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ yarn upgrade [package]</div><div class="line">$ yarn upgrade [package]@[version]</div><div class="line">$ yarn upgrade [package]@[tag]</div></pre></td></tr></table></figure></li>
<li>移除依赖包<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn remove [package]</div></pre></td></tr></table></figure></li>
<li>安装项目的全部依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ yarn install </div><div class="line">或</div><div class="line">$ yarn</div></pre></td></tr></table></figure>
<!-- 内容 -->
</li>
</ol>
<hr>
<div class="note info"><h4 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h4><p><a href="https://yarnpkg.com/zh-Hans/" target="_blank" rel="external">yarn官网</a></p>
</div>
<div class="note warning"><p>转载请注明出处<br>文章有问题请指出</p>
</div>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    &lt;div class=&quot;note default&quot;&gt;&lt;h3 id=&quot;文章摘要：介绍yarn的一些常用命令的使用&quot;&gt;&lt;a href=&quot;#文章摘要：介绍yarn的一些常用命令的使用&quot; class=&quot;headerlink&quot; title=&quot;文章摘要：介绍yarn的一些常用命令的使用&quot;&gt;&lt;/a&gt;文章摘要：介绍yarn的一些常用命令的使用&lt;/h3&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="终端命令" scheme="https://swiftbman.github.io/categories/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="yarn" scheme="https://swiftbman.github.io/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>npm的一些常用命令</title>
    <link href="https://swiftbman.github.io/2017/07/19/UseNpm/"/>
    <id>https://swiftbman.github.io/2017/07/19/UseNpm/</id>
    <published>2017-07-19T14:18:45.000Z</published>
    <updated>2017-07-19T15:35:15.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p><excerpt in="" index="" |="" 首页摘要=""><br>    <div class="note default"><h3 id="文章摘要：介绍npm一些常用命令的使用"><a href="#文章摘要：介绍npm一些常用命令的使用" class="headerlink" title="文章摘要：介绍npm一些常用命令的使用"></a>文章摘要：介绍npm一些常用命令的使用</h3></div><br> <a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<hr>
<!-- 内容 -->
<ol>
<li>安装模块<figure class="highlight plain"><figcaption><span>全局安装</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;Module Name&gt; -g</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>局部安装</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;Module Name&gt;</div></pre></td></tr></table></figure>
<div class="note info"><p>你需要在当前的目录下执行初始化，也就是说当前目录必须有 package.json 文件。或者，你在当前的目录下人为的建立好node_modules目录否则npm会一直向上寻找package.json的所在目录，或者是node_modules目录，最后终止在用户根目录。</p>
</div></li>
<li>查看安装的模块及依赖<figure class="highlight plain"><figcaption><span>查看全局模块及依赖</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm ls -g</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>查看局部模块及依赖</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm ls</div></pre></td></tr></table></figure></li>
<li>卸载模块<figure class="highlight plain"><figcaption><span>全局卸载模块</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm uninstall &lt;Module Name&gt; -g</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>局部卸载模块</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm uninstall &lt;Module Name&gt;</div></pre></td></tr></table></figure></li>
<li>缓存验证<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm cache verify</div></pre></td></tr></table></figure></li>
<li>清理缓存<figure class="highlight plain"><figcaption><span>--force强制的意思</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm cache clean --force</div></pre></td></tr></table></figure></li>
<li>检查模块是否已经过时<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm outdated</div></pre></td></tr></table></figure></li>
<li>更新模块<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm update</div></pre></td></tr></table></figure></li>
<li>升级npm<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i -g npm</div></pre></td></tr></table></figure></li>
<li>查看npm版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm -v</div></pre></td></tr></table></figure></li>
<li>查看某个模块的版本号<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm list &lt;Module name&gt;</div></pre></td></tr></table></figure></li>
<li>搜索模块<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm search &lt;Module name&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<div class="note info"><h4 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h4><p><a href="https://www.npmjs.com" target="_blank" rel="external">NPM 官网</a><br><a href="http://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="external">NPM 使用介绍</a><br><a href="http://www.cnblogs.com/PeunZhang/p/5553574.html" target="_blank" rel="external">NPM 常用命令详解</a></p>
</div>
<div class="note warning"><p>转载请注明出处<br>文章有问题请指出</p>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    &lt;div class=&quot;note default&quot;&gt;&lt;h3 id=&quot;文章摘要：介绍npm一些常用命令的使用&quot;&gt;&lt;a href=&quot;#文章摘要：介绍npm一些常用命令的使用&quot; class=&quot;headerlink&quot; title=&quot;文章摘要：介绍npm一些常用命令的使用&quot;&gt;&lt;/a&gt;文章摘要：介绍npm一些常用命令的使用&lt;/h3&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="终端命令" scheme="https://swiftbman.github.io/categories/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="npm" scheme="https://swiftbman.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>brew命令的使用</title>
    <link href="https://swiftbman.github.io/2017/07/18/UseBrew/"/>
    <id>https://swiftbman.github.io/2017/07/18/UseBrew/</id>
    <published>2017-07-17T16:38:28.000Z</published>
    <updated>2017-07-19T08:59:57.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p><excerpt in="" index="" |="" 首页摘要=""><br>    <div class="note default"><h3 id="文章摘要：介绍brew一些常用命令的使用"><a href="#文章摘要：介绍brew一些常用命令的使用" class="headerlink" title="文章摘要：介绍brew一些常用命令的使用"></a>文章摘要：介绍brew一些常用命令的使用</h3></div><br> <a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<hr>
<ol>
<li><p>查看brew帮助</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew help</div></pre></td></tr></table></figure>
</li>
<li><p>搜索软件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew search [TEXT|/REGEX/]</div></pre></td></tr></table></figure>
</li>
<li><p>安装软件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install FORMULA...</div></pre></td></tr></table></figure>
</li>
<li><p>卸载软件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew uninstall FORMULA...</div></pre></td></tr></table></figure>
</li>
<li><p>显示已经安装的软件列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew list [FORMULA...]</div></pre></td></tr></table></figure>
</li>
<li><p>查看过期的软件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew outdated</div></pre></td></tr></table></figure>
</li>
<li><p>更新 Homebrew 自己</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew update</div></pre></td></tr></table></figure>
</li>
<li><p>更新某个具体软件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew upgrade [FORMULA...]</div></pre></td></tr></table></figure>
</li>
<li><p>更新所有软件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew upgrade</div></pre></td></tr></table></figure>
</li>
<li><p>查看软件信息、网站、选项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew (info|home|options) [FORMULA...]</div></pre></td></tr></table></figure>
</li>
<li><p>清除软件老版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew cleanup</div></pre></td></tr></table></figure>
</li>
<li><p>清除某个软件老版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew cleanup FORMULA...</div></pre></td></tr></table></figure>
</li>
<li><p>查看配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew config</div></pre></td></tr></table></figure>
</li>
<li><p>查看有没有安装的问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew doctor</div></pre></td></tr></table></figure>
</li>
<li><p>更新和软件升级</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew update &amp;&amp; brew upgrade</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<div class="note info"><h4 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h4><p><a href="https://brew.sh" target="_blank" rel="external">Homebrew官网</a></p>
</div>
<div class="note warning"><p>转载请注明出处<br>文章有问题请指出</p>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    &lt;div class=&quot;note default&quot;&gt;&lt;h3 id=&quot;文章摘要：介绍brew一些常用命令的使用&quot;&gt;&lt;a href=&quot;#文章摘要：介绍brew一些常用命令的使用&quot; class=&quot;headerlink&quot; title=&quot;文章摘要：介绍brew一些常用命令的使用&quot;&gt;&lt;/a&gt;文章摘要：介绍brew一些常用命令的使用&lt;/h3&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="终端命令" scheme="https://swiftbman.github.io/categories/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="brew" scheme="https://swiftbman.github.io/tags/brew/"/>
    
  </entry>
  
</feed>
